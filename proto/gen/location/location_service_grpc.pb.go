// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/location_service.proto

package location

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocationService_UpdateDriverLocation_FullMethodName = "/location.LocationService/UpdateDriverLocation"
	LocationService_GetDriverLocation_FullMethodName    = "/location.LocationService/GetDriverLocation"
	LocationService_GetNearbyDrivers_FullMethodName     = "/location.LocationService/GetNearbyDrivers"
	LocationService_StreamDriverLocation_FullMethodName = "/location.LocationService/StreamDriverLocation"
	LocationService_UpdateRouteProgress_FullMethodName  = "/location.LocationService/UpdateRouteProgress"
)

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Location Service gRPC API
type LocationServiceClient interface {
	// Update driver location (real-time)
	UpdateDriverLocation(ctx context.Context, in *UpdateDriverLocationRequest, opts ...grpc.CallOption) (*UpdateDriverLocationResponse, error)
	// Get driver location
	GetDriverLocation(ctx context.Context, in *GetDriverLocationRequest, opts ...grpc.CallOption) (*GetDriverLocationResponse, error)
	// Find nearby drivers
	GetNearbyDrivers(ctx context.Context, in *GetNearbyDriversRequest, opts ...grpc.CallOption) (*GetNearbyDriversResponse, error)
	// Stream driver location updates
	StreamDriverLocation(ctx context.Context, in *StreamDriverLocationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LocationUpdate], error)
	// Update delivery route progress
	UpdateRouteProgress(ctx context.Context, in *UpdateRouteProgressRequest, opts ...grpc.CallOption) (*UpdateRouteProgressResponse, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) UpdateDriverLocation(ctx context.Context, in *UpdateDriverLocationRequest, opts ...grpc.CallOption) (*UpdateDriverLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDriverLocationResponse)
	err := c.cc.Invoke(ctx, LocationService_UpdateDriverLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetDriverLocation(ctx context.Context, in *GetDriverLocationRequest, opts ...grpc.CallOption) (*GetDriverLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDriverLocationResponse)
	err := c.cc.Invoke(ctx, LocationService_GetDriverLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetNearbyDrivers(ctx context.Context, in *GetNearbyDriversRequest, opts ...grpc.CallOption) (*GetNearbyDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNearbyDriversResponse)
	err := c.cc.Invoke(ctx, LocationService_GetNearbyDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) StreamDriverLocation(ctx context.Context, in *StreamDriverLocationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LocationUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LocationService_ServiceDesc.Streams[0], LocationService_StreamDriverLocation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamDriverLocationRequest, LocationUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocationService_StreamDriverLocationClient = grpc.ServerStreamingClient[LocationUpdate]

func (c *locationServiceClient) UpdateRouteProgress(ctx context.Context, in *UpdateRouteProgressRequest, opts ...grpc.CallOption) (*UpdateRouteProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRouteProgressResponse)
	err := c.cc.Invoke(ctx, LocationService_UpdateRouteProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations must embed UnimplementedLocationServiceServer
// for forward compatibility.
//
// Location Service gRPC API
type LocationServiceServer interface {
	// Update driver location (real-time)
	UpdateDriverLocation(context.Context, *UpdateDriverLocationRequest) (*UpdateDriverLocationResponse, error)
	// Get driver location
	GetDriverLocation(context.Context, *GetDriverLocationRequest) (*GetDriverLocationResponse, error)
	// Find nearby drivers
	GetNearbyDrivers(context.Context, *GetNearbyDriversRequest) (*GetNearbyDriversResponse, error)
	// Stream driver location updates
	StreamDriverLocation(*StreamDriverLocationRequest, grpc.ServerStreamingServer[LocationUpdate]) error
	// Update delivery route progress
	UpdateRouteProgress(context.Context, *UpdateRouteProgressRequest) (*UpdateRouteProgressResponse, error)
	mustEmbedUnimplementedLocationServiceServer()
}

// UnimplementedLocationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocationServiceServer struct{}

func (UnimplementedLocationServiceServer) UpdateDriverLocation(context.Context, *UpdateDriverLocationRequest) (*UpdateDriverLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriverLocation not implemented")
}
func (UnimplementedLocationServiceServer) GetDriverLocation(context.Context, *GetDriverLocationRequest) (*GetDriverLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverLocation not implemented")
}
func (UnimplementedLocationServiceServer) GetNearbyDrivers(context.Context, *GetNearbyDriversRequest) (*GetNearbyDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearbyDrivers not implemented")
}
func (UnimplementedLocationServiceServer) StreamDriverLocation(*StreamDriverLocationRequest, grpc.ServerStreamingServer[LocationUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDriverLocation not implemented")
}
func (UnimplementedLocationServiceServer) UpdateRouteProgress(context.Context, *UpdateRouteProgressRequest) (*UpdateRouteProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteProgress not implemented")
}
func (UnimplementedLocationServiceServer) mustEmbedUnimplementedLocationServiceServer() {}
func (UnimplementedLocationServiceServer) testEmbeddedByValue()                         {}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	// If the following call pancis, it indicates UnimplementedLocationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_UpdateDriverLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).UpdateDriverLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_UpdateDriverLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).UpdateDriverLocation(ctx, req.(*UpdateDriverLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetDriverLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDriverLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetDriverLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetDriverLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetDriverLocation(ctx, req.(*GetDriverLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetNearbyDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearbyDriversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetNearbyDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetNearbyDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetNearbyDrivers(ctx, req.(*GetNearbyDriversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_StreamDriverLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDriverLocationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocationServiceServer).StreamDriverLocation(m, &grpc.GenericServerStream[StreamDriverLocationRequest, LocationUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LocationService_StreamDriverLocationServer = grpc.ServerStreamingServer[LocationUpdate]

func _LocationService_UpdateRouteProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).UpdateRouteProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_UpdateRouteProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).UpdateRouteProgress(ctx, req.(*UpdateRouteProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDriverLocation",
			Handler:    _LocationService_UpdateDriverLocation_Handler,
		},
		{
			MethodName: "GetDriverLocation",
			Handler:    _LocationService_GetDriverLocation_Handler,
		},
		{
			MethodName: "GetNearbyDrivers",
			Handler:    _LocationService_GetNearbyDrivers_Handler,
		},
		{
			MethodName: "UpdateRouteProgress",
			Handler:    _LocationService_UpdateRouteProgress_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDriverLocation",
			Handler:       _LocationService_StreamDriverLocation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/location_service.proto",
}
